{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udc4b Welcome to my technical portfolio","text":"<p>Technical Writer | DevOps for Docs | NLP Automation | Docs-as-Code Advocate</p>"},{"location":"#about-me","title":"About me","text":"<p>I'm passionate about building robust, automated documentation workflows that empower teams to deliver high-quality docs at scale. My expertise blends:</p> <ul> <li>Docs-as-Code: MkDocs, CI/CD, automated publishing</li> <li>DevOps for Documentation: Custom pipelines, quality gates, and review automation</li> <li>NLP &amp; AI: Style rule engines, readability metrics, RAG (Retrieval-Augmented Generation)</li> <li>Modern Tooling: Python, Flask, spaCy, GitHub Actions, Fluid Topics</li> </ul> \ud83d\udd27 Doc Scanner App AI-powered document review (Flask, spaCy, readability, rule engine) \u2699\ufe0f DevOps Pipeline Automation CI/CD for docs, auto-publish to Fluid Topics, quality gates \ud83e\udde0 RAG for Style Rules Retrieval-augmented guidance for consistent, high-quality docs"},{"location":"#portfolio-highlights","title":"\ud83c\udf1f Portfolio highlights","text":"<ul> <li>Automated Documentation Pipeline: End-to-end CI/CD for docs, including linting, build, and deployment to Fluid Topics.</li> <li>Doc Scanner App: Upload any doc (PDF, DOCX, Markdown, TXT) and get instant, sentence-level feedback with AI-powered suggestions.</li> <li>Custom Style Rules: Enforce Microsoft/Google style, terminology, and clarity with NLP and rule-based checks.</li> <li>Writing Quality Metrics: Readability, clarity, and consistency scores for every document.</li> <li>Open Source &amp; Collaboration: Code on GitHub, open to remote opportunities.</li> </ul>"},{"location":"#explore","title":"\ud83d\udcc2 Explore","text":"<ul> <li>Writing Samples:<ul> <li>API Doc Sample:     For developers and integrators. Clear, actionable endpoint reference with real-world examples. Purpose: Enable fast, error-free API adoption. Solves: Onboarding friction and support queries.</li> <li>Style Guide Extracts:     For writers and editors. Practical rules and before/after examples for tone, terminology, and formatting. Purpose: Drive consistency and clarity. Solves: Inconsistent docs and unclear messaging.</li> </ul> </li> <li>Projects: DevOps automation, Doc Scanner, and technical tooling</li> <li>About Me | Contact</li> </ul> Let's build the future of documentation\u2014automated, intelligent, and delightful to use."},{"location":"about/","title":"About","text":"<p>I combine technical writing craft with DevOps discipline. I like fast feedback loops, consistent terminology, and clean information architecture.</p>"},{"location":"about/#skills","title":"Skills","text":"<ul> <li>Docs-as-code: MkDocs, Swagger UI, OpenAPI</li> <li>DevOps: GitHub Actions, CI/CD, Docker basics</li> <li>NLP: spaCy, readability metrics, RAG</li> </ul>"},{"location":"contact/","title":"Contact","text":"<ul> <li>LinkedIn: https://www.linkedin.com/in/tharun-sebastian</li> <li>GitHub: https://github.com/Tharun135</li> <li>Email: tharun135@gmail.com</li> </ul>"},{"location":"projects/","title":"Projects","text":"<p>Brief cards linking to detailed pages.</p> <ul> <li>Doc Scanner (NLP + Flask)</li> <li>DevOps Pipeline Automation</li> </ul>"},{"location":"projects/devops-pipeline/","title":"DevOps Pipeline Automation","text":"<p>This project demonstrates a comprehensive DevOps pipeline for automating the build, linting, deployment, and publication of technical documentation using GitLab CI/CD, Python scripts, and integration with Fluid Topics.</p>"},{"location":"projects/devops-pipeline/#pipeline-overview","title":"Pipeline Overview","text":"<p>The pipeline is defined in <code>.gitlab-ci.yml</code> and consists of several stages:</p> <ul> <li>Lint: Ensures code and documentation quality using markdown linters and custom Python linters.</li> <li>Build: Installs dependencies and builds the documentation site using MkDocs.</li> <li>Deploy: Publishes the built site as artifacts and prepares it for deployment.</li> <li>Deploy to Fluid Topics: Automates the packaging and upload of documentation to Fluid Topics for both staging and production environments.</li> <li>Translation: Handles translation-related build and deployment steps.</li> </ul>"},{"location":"projects/devops-pipeline/#key-features","title":"Key Features","text":"<ul> <li>Modular pipeline using includes and templates for reusability.</li> <li>Environment variables for secure credentials and configuration.</li> <li>Manual and automatic deployment triggers.</li> <li>Artifact management for site and ZIP files.</li> <li>Integration with external documentation platforms (Fluid Topics).</li> </ul>"},{"location":"projects/devops-pipeline/#pipeline-stages-and-jobs","title":"Pipeline Stages and Jobs","text":""},{"location":"projects/devops-pipeline/#1-linting","title":"1. Linting","text":"<ul> <li>lint-markdown: Uses a reusable markdown linter image to check documentation quality.</li> <li>fluid-topics-linter: Runs a custom Python linter (<code>ft-linter.py</code>) on the <code>docs</code> directory.</li> </ul>"},{"location":"projects/devops-pipeline/#2-build","title":"2. Build","text":"<ul> <li>build_mkdocs: Installs dependencies with Poetry and builds the documentation using MkDocs.</li> <li>build_mkdocs_offline: Builds an offline version of the documentation.</li> </ul>"},{"location":"projects/devops-pipeline/#3-deploy","title":"3. Deploy","text":"<ul> <li>.deploy_mkdocs: Moves the built site to a <code>public/</code> directory for deployment.</li> <li>review_app: Creates a review environment for each branch.</li> <li>pages: Publishes the documentation site as a GitLab Pages artifact.</li> </ul>"},{"location":"projects/devops-pipeline/#4-deploy-to-fluid-topics","title":"4. Deploy to Fluid Topics","text":"<p>Jobs in <code>ci-publish-jobs.yml</code> automate the upload of documentation to Fluid Topics:</p> <ul> <li>ft-staging: Packages the documentation and uploads it to the Fluid Topics staging environment.</li> <li>ft-public: Packages and uploads to the production environment (runs only on the main branch).</li> </ul>"},{"location":"projects/devops-pipeline/#key-automation-scripts","title":"Key Automation Scripts","text":""},{"location":"projects/devops-pipeline/#metadatapy","title":"metadata.py","text":"<ul> <li>Appends metadata from <code>ft/metadata.yml</code> to <code>mkdocs.yml</code>.</li> <li>Comments out special <code>!ENV</code> blocks for compatibility.</li> <li>Ensures metadata is not duplicated.</li> </ul>"},{"location":"projects/devops-pipeline/#upload_stagingpy-uploadpy","title":"upload_staging.py &amp; upload.py","text":"<ul> <li>Package the documentation (<code>mkdocs.yml</code> and <code>docs/</code>) into a ZIP archive.</li> <li>Use environment variables for API keys and user info.</li> <li>Upload the ZIP to Fluid Topics via a secure API.</li> <li>Separate scripts for staging and production endpoints.</li> </ul>"},{"location":"projects/devops-pipeline/#example-upload-script-staging","title":"Example: Upload Script (Staging)","text":"<pre><code>import os\nimport requests\nimport zipfile\n\nzip_archive = 'S7-connector.zip'\nfile_to_zip = 'mkdocs.yml'\nfolder_to_zip = 'docs/'\napi_key = os.getenv('FT_PUBS')\n# ... (rest of the script)\n</code></pre>"},{"location":"projects/devops-pipeline/#security-and-best-practices","title":"Security and Best Practices","text":"<ul> <li>All secrets and credentials are managed via environment variables.</li> <li>Only the main branch can trigger production uploads.</li> <li>Artifacts are set to expire to save storage.</li> </ul>"},{"location":"projects/devops-pipeline/#benefits","title":"Benefits","text":"<ul> <li>Fully automated documentation lifecycle: lint, build, deploy, and publish.</li> <li>Easy integration with translation and review workflows.</li> <li>Secure, repeatable, and auditable process.</li> </ul>"},{"location":"projects/docscanner/","title":"Doc Scanner \u2013 Advanced Document Analysis","text":"<p>This project showcases an advanced AI-powered document scanner web application. It enables users to upload documents (PDF, DOCX, Markdown, TXT, etc.), analyzes their content for writing quality, grammar, and style, and provides actionable feedback and AI-powered suggestions for improvement.</p>"},{"location":"projects/docscanner/#features-overview","title":"Features Overview","text":"<ul> <li>Modern Web UI: Responsive, visually appealing interface with drag-and-drop upload, dark mode, and real-time progress.</li> <li>Multi-format Support: Accepts PDF, DOCX, Markdown, AsciiDoc, and plain text files, including batch uploads via ZIP.</li> <li>AI Writing Assistant: Analyzes writing quality, grammar, and style, and provides smart suggestions and metrics.</li> <li>Sentence-level Feedback: Highlights issues in context and links feedback to specific sentences.</li> <li>AI Suggestions: Offers AI-powered rewrites and explanations for detected issues, with RAG (Retrieval-Augmented Generation) and user learning.</li> <li>Batch Processing: Supports multi-file and ZIP uploads with summary dashboards.</li> <li>User Feedback &amp; History: Tracks suggestion history and allows users to rate and provide feedback on AI suggestions.</li> </ul>"},{"location":"projects/docscanner/#architecture","title":"Architecture","text":""},{"location":"projects/docscanner/#frontend-indexhtml","title":"Frontend (index.html)","text":"<ul> <li>UI Frameworks: Bootstrap 5, FontAwesome, Chart.js for charts, and Marked.js for Markdown rendering.</li> <li>Drag-and-drop Upload: Users can upload single or multiple files, with real-time progress and batch support.</li> <li>Document Analysis Dashboard: Displays word/sentence counts, writing quality score, detected issues, and smart insights.</li> <li>Sentence Highlighting: Sentences are highlighted in the document view and linked to feedback.</li> <li>AI Feedback Tab: Users can request AI-powered suggestions for each issue, view explanations, and see knowledge sources.</li> <li>Export &amp; History: Export feedback as CSV and view suggestion history with ratings.</li> </ul>"},{"location":"projects/docscanner/#backend-flask","title":"Backend (Flask)","text":"<ul> <li>File Parsing: Handles PDF, DOCX, Markdown, AsciiDoc, and TXT using PyPDF2, python-docx, markdown, and BeautifulSoup.</li> <li>Sentence Extraction: Uses spaCy (if available) for robust sentence segmentation, with HTML preservation for accurate highlighting.</li> <li>Rule-based Analysis: Applies custom rules for grammar, style, and readability (modular, extensible via Python modules).</li> <li>AI Suggestion Engine: Combines rule-based feedback with LLM-powered suggestions (RAG, fallback to deterministic rewrite).</li> <li>Real-time Progress: WebSocket-based progress updates for uploads and analysis.</li> <li>Batch Processing: Handles ZIP uploads, processes each file, and aggregates results.</li> <li>User Feedback &amp; Learning: Stores user ratings and feedback to improve future suggestions.</li> </ul>"},{"location":"projects/docscanner/#example-workflow","title":"Example Workflow","text":"<ol> <li>Upload Document: Drag and drop or browse to select files (PDF, DOCX, MD, TXT, ZIP).</li> <li>Real-time Analysis: Progress bar and stage indicators show upload, parsing, sentence extraction, analysis, and report generation.</li> <li>Interactive Feedback: View document with sentence-level highlights. Click on issues to get AI-powered suggestions and explanations.</li> <li>Export &amp; Review: Export feedback as CSV, review analysis charts, and access suggestion history.</li> </ol>"},{"location":"projects/docscanner/#key-code-snippets","title":"Key Code Snippets","text":""},{"location":"projects/docscanner/#frontend-drag-and-drop-upload-progress","title":"Frontend: Drag-and-Drop Upload &amp; Progress","text":"<pre><code>&lt;!-- Dropzone for file upload --&gt;\n&lt;div id=\"dropzone\" class=\"dropzone\"&gt; ... &lt;/div&gt;\n&lt;script&gt;\n// Drag-and-drop, file selection, and progress logic\n// ... (see index.html for full implementation)\n&lt;/script&gt;\n</code></pre>"},{"location":"projects/docscanner/#backend-file-parsing-sentence-extraction","title":"Backend: File Parsing &amp; Sentence Extraction","text":"<pre><code># Parse uploaded file and extract sentences with HTML preservation\ndef parse_file(file):\n    # ... (see backend code)\n    if extension == '.pdf':\n        return parse_pdf(file)\n    # ...\n\ndef extract_sentences_with_html_preservation(html_content):\n    # Uses spaCy if available, else regex splitting\n    # ...\n</code></pre>"},{"location":"projects/docscanner/#backend-ai-suggestion-endpoint","title":"Backend: AI Suggestion Endpoint","text":"<pre><code>@main.route('/ai_suggestion', methods=['POST'])\ndef ai_suggestion():\n    # Receives feedback and sentence context\n    # Returns AI-powered rewrite, explanation, and sources\n    # ...\n</code></pre>"},{"location":"projects/docscanner/#security-best-practices","title":"Security &amp; Best Practices","text":"<ul> <li>All file uploads are validated and processed securely.</li> <li>Environment variables are used for configuration and API keys.</li> <li>Modular rule system for easy extension and maintenance.</li> <li>User feedback is anonymized and used to improve AI suggestions.</li> </ul>"},{"location":"projects/docscanner/#benefits","title":"Benefits","text":"<ul> <li>Automated, actionable feedback for writers and editors.</li> <li>AI-powered suggestions tailored to document context and user goals.</li> <li>Modern, user-friendly interface for document analysis and improvement.</li> <li>Extensible and secure architecture for future enhancements.</li> </ul>"},{"location":"writing/","title":"Writing samples","text":"<p>Short, scannable intros. Each sample should state audience, purpose, and what problem it solves.</p> <ul> <li>API Doc Sample \u2014 endpoint reference, auth, examples.</li> <li>Style Guide Extracts \u2014 consistent tone, terminology, and examples.</li> </ul>"},{"location":"writing/sample-api-doc/","title":"API reference: Document analysis API","text":"<p>This API enables automated analysis of documents for style, readability, and consistency. It is designed for integration with documentation tools, CI/CD pipelines, and content quality dashboards.</p>"},{"location":"writing/sample-api-doc/#authentication","title":"Authentication","text":"<p>All endpoints require an API key in the <code>Authorization</code> header:</p> <pre><code>Authorization: Bearer YOUR_API_KEY\n</code></pre>"},{"location":"writing/sample-api-doc/#endpoints","title":"Endpoints","text":""},{"location":"writing/sample-api-doc/#post-analyze","title":"POST /analyze","text":"<p>Analyze a document for style, grammar, and readability issues.</p> <p>Request:</p> <ul> <li>Method: <code>POST</code></li> <li>URL: <code>/analyze</code></li> <li>Headers:<ul> <li><code>Authorization: Bearer YOUR_API_KEY</code></li> <li><code>Content-Type: application/json</code></li> </ul> </li> <li>Body:<ul> <li><code>text</code> (string, required): The document content to analyze.</li> </ul> </li> </ul> <p>Example Request:</p> <pre><code>curl -X POST https://api.example.com/analyze \\\n    -H \"Authorization: Bearer YOUR_API_KEY\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"text\": \"Your document text here.\"}'\n</code></pre> <p>Response:</p> <pre><code>{\n    \"sentences\": [\n        {\"text\": \"This is a sentence.\", \"issues\": [\"Passive voice\"]},\n        {\"text\": \"Another sentence.\", \"issues\": []}\n    ],\n    \"readability\": 72.5,\n    \"quality_score\": 88\n}\n</code></pre> <p>Error Responses:</p> <ul> <li><code>401 Unauthorized</code>: Invalid or missing API key.</li> <li><code>400 Bad Request</code>: Malformed input (e.g., missing <code>text</code> field).</li> <li><code>500 Internal Server Error</code>: Unexpected server error.</li> </ul>"},{"location":"writing/sample-api-doc/#error-codes","title":"Error Codes","text":"Code Description 400 Bad Request 401 Unauthorized 422 Unprocessable Entity 500 Internal Server Error"},{"location":"writing/sample-api-doc/#example-use-case","title":"Example Use Case","text":"<p>Integrate this API into your CI pipeline to automatically review documentation for style and clarity before merging changes.</p>"},{"location":"writing/style-guide-extracts/","title":"Style Guide Extracts","text":"<p>These extracts demonstrate my approach to consistent, high-quality technical documentation. They cover tone, terminology, formatting, and real-world editing examples.</p>"},{"location":"writing/style-guide-extracts/#tone-and-voice","title":"Tone and Voice","text":"<ul> <li>Use active voice: \"Click the button\" (not \"The button should be clicked\").</li> <li>Be concise, direct, and user-focused.</li> <li>Avoid unnecessary jargon and filler words.</li> <li>Maintain a professional yet approachable tone.</li> </ul>"},{"location":"writing/style-guide-extracts/#terminology","title":"Terminology","text":"<ul> <li>Use \"application\" (not \"app\").</li> <li>Use \"sign in\" (not \"login\" as a verb).</li> <li>Prefer \"select\" over \"choose\" for UI actions.</li> <li>Consistent capitalization for product names (e.g., \"Doc Scanner\").</li> </ul>"},{"location":"writing/style-guide-extracts/#formatting-rules","title":"Formatting Rules","text":"<ul> <li>Use sentence case for headings.</li> <li>Always use fenced code blocks for code samples.</li> <li>Numbered steps for procedures; bullets for lists.</li> <li>Bold UI elements and menu paths (e.g., File &gt; Export).</li> </ul>"},{"location":"writing/style-guide-extracts/#example-edits","title":"Example Edits","text":"<p>Before:</p> <p>The user may now login to the app by clicking on the login button.</p> <p>After:</p> <p>Sign in to the application by clicking the Sign In button.</p> <p>Before:</p> <p>Please choose the export option from the file menu to save your document.</p> <p>After:</p> <p>To save your document, select File &gt; Export.</p> <p>Before:</p> <p>The data was processed by the system and results are shown below.</p> <p>After:</p> <p>The system processed the data and displays the results below.</p>"}]}